
#if UFBXT_IMPL
static ufbx_string make_str(const char *s) {
	ufbx_string str = { s, strlen(s) };
	return str;
};
#endif

UFBXT_TEST(table_proptype_map_simple)
#if UFBXT_IMPL
{
	// Generated by `misc/prop_type_perfect_hash.py`
	ufbxt_assert(ufbxi_get_prop_type(make_str("Boolean")) == UFBX_PROP_BOOLEAN);
	ufbxt_assert(ufbxi_get_prop_type(make_str("bool")) == UFBX_PROP_BOOLEAN);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Integer")) == UFBX_PROP_INTEGER);
	ufbxt_assert(ufbxi_get_prop_type(make_str("int")) == UFBX_PROP_INTEGER);
	ufbxt_assert(ufbxi_get_prop_type(make_str("enum")) == UFBX_PROP_INTEGER);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Number")) == UFBX_PROP_NUMBER);
	ufbxt_assert(ufbxi_get_prop_type(make_str("double")) == UFBX_PROP_NUMBER);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Vector")) == UFBX_PROP_VECTOR);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Vector3D")) == UFBX_PROP_VECTOR);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Color")) == UFBX_PROP_COLOR);
	ufbxt_assert(ufbxi_get_prop_type(make_str("ColorRGB")) == UFBX_PROP_COLOR);
	ufbxt_assert(ufbxi_get_prop_type(make_str("String")) == UFBX_PROP_STRING);
	ufbxt_assert(ufbxi_get_prop_type(make_str("KString")) == UFBX_PROP_STRING);
	ufbxt_assert(ufbxi_get_prop_type(make_str("DateTime")) == UFBX_PROP_DATE_TIME);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Lcl Translation")) == UFBX_PROP_TRANSLATION);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Lcl Rotation")) == UFBX_PROP_ROTATION);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Lcl Scaling")) == UFBX_PROP_SCALING);
}
#endif

UFBXT_TEST(table_proptype_map_not_found)
#if UFBXT_IMPL
{
	// Generated by `misc/prop_type_perfect_hash.py`
	ufbxt_assert(ufbxi_get_prop_type(make_str("Test")) == UFBX_PROP_UNKNOWN);
	ufbxt_assert(ufbxi_get_prop_type(make_str("Another")) == UFBX_PROP_UNKNOWN);
}
#endif

UFBXT_TEST(table_proptype_map_self)
#if UFBXT_IMPL
{
	size_t num = ufbxi_arraycount(ufbxi_proptype_map);
	for (size_t i = 0; i < num; i++) {
		const ufbxi_proptype_map_entry *entry = &ufbxi_proptype_map[i];
		if (entry->hash == 0) continue;

		uint32_t hash = ufbxi_hash_string(entry->name);
		ufbxt_assert(entry->hash == hash);
		ufbxt_assert(ufbxi_proptype_permute_hash(hash) == i);
	}
}
#endif
